{"version":3,"sources":["utils/calculate.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["calculate","inputVal","values","i","length","console","log","parseInt","push","Math","pow","App","useState","decimalVal","setDecimalValue","setValues","errors","setErrors","setInputVal","formRef","useRef","useEffect","reduce","sum","value","maxW","as","role","ref","onSubmit","e","preventDefault","current","reset","regex","test","validate","id","isRequired","placeholder","onChange","target","type","variantColor","variant","width","mt","split","join","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c32f529a.chunk.js","sourcesContent":["const calculate = (inputVal:string) => {\n    const values = [];\n\n    for (let i = inputVal.length-1; i >= 0; i--) {\n      console.log(i)\n      if (parseInt(inputVal[i]) === 1) {\n        console.log(true)\n        values.push(Math.pow(2, i))\n      } else {\n        console.log(false)\n        values.push(0);\n      }\n    }\n    console.log(values)\n    return values;\n  }\n\n  export default calculate;","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport {\n  Container,\n  FormControl,\n  FormHelperText,\n  Button,\n  Input,\n  Heading\n} from \"@chakra-ui/react\"\nimport calculate from './utils/calculate';\n\nfunction App() {\n  const [decimalVal, setDecimalValue] = useState(0);\n  const [values, setValues] = useState<number[]>([]);\n  const [errors, setErrors] = useState<string>(\"\");\n  const [inputVal, setInputVal] = useState<string>(\"\");\n  const formRef = useRef<any>();\n\n  useEffect(() => {\n    setDecimalValue(values.reduce((sum, value) => sum + value, 0));\n  }, [values]);\n\n  const validate = () => {\n    const regex = /^[0-1]*$/gm.test(inputVal);\n    if (inputVal.length > 8) { throw 'max 8 values' }\n    if (!regex) { throw 'only 0s and 1s' }\n  }\n\n  const handleSubmit = (e: any) => {\n    try {\n      e.preventDefault();\n      formRef.current.reset();\n      setErrors(\"\");\n      validate();\n      setValues(calculate(inputVal));\n    } catch (e: any) {\n      setErrors(e);\n      setInputVal(\"\");\n      setValues([]);\n    }\n  }\n\n  const displayBinaryValues = () => {\n    return values.join(\" + \");\n  }\n\n  return (\n    <Container maxW=\"container.xl\">\n      <Heading as=\"h1\">BIN2DEC</Heading>\n      <form role=\"form\" ref={formRef} onSubmit={handleSubmit}>\n        <FormControl id=\"first-name\" isRequired>\n          <Input role=\"input\" placeholder=\"Enter binary values\" onChange={(e) => setInputVal(e.target.value)} />\n          <FormHelperText>Example: 11100000 = 7</FormHelperText>\n          <Button role=\"button\" type=\"submit\" variantColor=\"teal\" variant=\"outline\" width=\"full\" mt={4}>\n            Enter\n          </Button>\n        </FormControl>\n      </form>\n      {errors ? <small data-testid=\"error\">{errors && errors}</small> :\n        <>\n          <p data-testid=\"input values\">{inputVal && inputVal.split(\"\").join(' ')}</p>\n          <p>{displayBinaryValues()}</p> = <span data-testid=\"conversion\">{decimalVal}</span>\n        </>}\n    </Container>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}